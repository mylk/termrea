#!/usr/bin/env python

from datetime import datetime
import fcntl
import urwid
import termios
import struct
import webbrowser

from adapters.config import ConfigAdapter
from adapters.database import DatabaseAdapter
import config
from widgets.readbutton import ReadButton
from widgets.sourcebutton import SourceButton
from widgets.unreadbutton import UnreadButton


def get_terminal_size():
    th, tw, hp, wp = struct.unpack('HHHH', fcntl.ioctl(0, termios.TIOCGWINSZ, struct.pack('HHHH', 0, 0, 0, 0)))
    return th, tw


def generate_interface(loop, rows):
    db = DatabaseAdapter()
    unread_items = db.find_unread_news().fetchall()
    db.close_connection()

    global sources_list
    global columns

    sources_list = urwid.SimpleListWalker([])
    for source in sources:
        button = SourceButton(sources[source]['title'])
        urwid.connect_signal(button, 'click', source_chosen, source)
        urwid.connect_signal(button, 'read', mark_source_as_read, source)
        sources_list.append(urwid.AttrMap(button, None, focus_map='reversed'))
        for subsource in sources[source]['sources']:
            for unread_item in unread_items:
                if unread_item['source_id'] == subsource and unread_item['read'] == 0:
                    button = SourceButton('. ' + sources[source]['sources'][subsource]['title'])
                    break
                else:
                    button = SourceButton('  ' + sources[source]['sources'][subsource]['title'])

            urwid.connect_signal(button, 'click', source_chosen, subsource)
            urwid.connect_signal(button, 'read', mark_source_as_read, subsource)
            sources_list.append(urwid.AttrMap(button, None, focus_map='reversed'))

    global news_items
    global news_list
    news_items = rows

    last_update_txt = urwid.Text(datetime.now().strftime('%c'))

    terminal_size = get_terminal_size()
    news_list = urwid.SimpleListWalker([])
    for row in rows:
        section_width = terminal_size[1] - 82
        button_width = terminal_size[1] - 79
        title = row['title'][0:section_width] + '...' if len(row['title']) >= section_width else row['title']
        button_text = '{:<26} {:<{width}} {}'.format(row['source'], title, row['date'], width=(button_width))

        if not row['read']:
            button = UnreadButton(button_text)
            urwid.connect_signal(button, 'read', mark_item_as_read, row['item_id'])
        else:
            button = ReadButton(button_text)
            urwid.connect_signal(button, 'unread', mark_item_as_unread, row['item_id'])

        urwid.connect_signal(button, 'click', item_chosen, row)
        news_list.append(urwid.AttrMap(button, None, focus_map='reversed'))

    if len(news_items) > index_with_focus:
        news_list.set_focus(index_with_focus)
    elif not news_items:
        pass
    elif len(news_items) == index_with_focus:
        news_list.set_focus((index_with_focus - 1))

    elements_list = urwid.ListBox(news_list)

    sources_list = urwid.ListBox(sources_list)
    columns = urwid.Columns([(28, sources_list), (1, urwid.SolidFill(' ')), ((terminal_size[1]-29), elements_list)])
    columns.set_focus(elements_list)

    pile = urwid.Pile([last_update_txt, urwid.Divider(), ((terminal_size[0]-2), columns)])
    widget = urwid.Filler(pile, valign='top')

    loop.widget = widget


def mark_source_as_read(the_node_id):
    global index_with_focus
    global node_id

    index_with_focus = 0
    node_id = node_id_unreads

    DatabaseAdapter().set_source_read(the_node_id)

    rows = get_source_items(node_id)

    generate_interface(loop, rows)


def source_chosen(the_node_id):
    global index_with_focus
    global node_id

    index_with_focus = 0
    node_id = the_node_id

    rows = get_source_items(node_id)

    generate_interface(loop, rows)


def mark_item_as_read(the_item_id):
    set_focused_item()

    DatabaseAdapter().set_item_read(the_item_id)

    rows = get_source_items(node_id)

    generate_interface(loop, rows)


def mark_item_as_unread(the_item_id):
    set_focused_item()

    DatabaseAdapter().set_item_unread(the_item_id)

    rows = get_source_items(node_id)

    generate_interface(loop, rows)


def item_chosen(row):
    set_focused_item()

    DatabaseAdapter().set_item_read(row['item_id'])

    db = DatabaseAdapter()
    rows = get_source_items(node_id)

    generate_interface(loop, rows)

    webbrowser.open_new_tab(row['url'])


def handle_input(key):
    if key in ['q', 'Q']:
        raise urwid.ExitMainLoop()
    elif key == 'h':
        # @TODO: show help with available keys
        pass
    elif key == 'f':
        set_focused_item()

        rows = get_source_items(node_id)
        generate_interface(loop, rows)
    else:
        return


def schedule_and_generate_interface(loop = None, data = None):
    set_focused_item()

    rows = get_source_items(node_id)
    generate_interface(loop, rows)

    loop.set_alarm_in(config.UPDATE_INTERVAL, schedule_and_generate_interface)


def get_source_items(the_node_id):
    db = DatabaseAdapter()

    if the_node_id and the_node_id != node_id_unreads:
        rows = db.get_node_items(the_node_id).fetchall()
    else:
        rows = db.find_unread_news().fetchall()
    db.close_connection()

    return rows


def set_focused_item():
    # retain the focused item after updating the list
    global index_with_focus

    list_with_focus = news_list

    #selected_item = columns.get_focus_widgets()[1].base_widget
    #if type(selected_item) == SourceButton:
    #    list_with_focus = sources_list

    index_with_focus = list_with_focus.get_focus()[1] if list_with_focus.get_focus()[1] else 0


urwid.register_signal(UnreadButton, ['click', 'read'])
urwid.register_signal(ReadButton, ['click', 'unread'])
urwid.register_signal(SourceButton, ['click', 'read', 'unread'])

index_with_focus = 0
columns = None
node_id_unreads = next(DatabaseAdapter().get_unreads_node())['node_id']
node_id = node_id_unreads
news_items = []

config_adapter = ConfigAdapter()
sources = config_adapter.get_sources()

news_list = urwid.SimpleListWalker([])
sources_list = urwid.SimpleListWalker([])

pile = urwid.Pile([])
widget = urwid.Filler(pile, valign='top')
loop = urwid.MainLoop(widget, palette=[('reversed', 'standout', '')], unhandled_input=handle_input)
loop.set_alarm_in(config.UPDATE_INTERVAL, schedule_and_generate_interface)

db = DatabaseAdapter()
rows = db.find_unread_news().fetchall()
db.close_connection()

generate_interface(loop, rows)

loop.run()
