#!/usr/bin/env python

from datetime import datetime
import os
import urwid
import webbrowser

from adapters.config import ConfigAdapter
from adapters.database import DatabaseAdapter
import config
from widgets.readbutton import ReadButton
from widgets.sourcebutton import SourceButton
from widgets.unreadbutton import UnreadButton


def generate_sources_list():
    db = DatabaseAdapter()
    unread_items = db.find_unread_news().fetchall()
    db.close_connection()

    sources_list = urwid.SimpleListWalker([])
    for source in sources:
        button = SourceButton(sources[source]['title'])
        urwid.connect_signal(button, 'click', source_chosen, source)
        urwid.connect_signal(button, 'click_unread', source_chosen_unread, source)
        urwid.connect_signal(button, 'read', mark_source_as_read, source)
        sources_list.append(urwid.AttrMap(button, None, focus_map='reversed'))

        for subsource in sources[source]['sources']:
            title_prefix = '  '
            for unread_item in unread_items:
                if unread_item['source_id'] == subsource and unread_item['read'] == 0:
                    title_prefix = 'Â· '
                    break

            button = SourceButton(title_prefix + sources[source]['sources'][subsource]['title'])
            urwid.connect_signal(button, 'click', source_chosen, subsource)
            urwid.connect_signal(button, 'click_unread', source_chosen_unread, subsource)
            urwid.connect_signal(button, 'read', mark_source_as_read, subsource)
            sources_list.append(urwid.AttrMap(button, None, focus_map='reversed'))

    return sources_list


def generate_news_list(rows):
    terminal_size = os.get_terminal_size()

    news_list = urwid.SimpleListWalker([])

    for row in rows:
        section_width = terminal_size.columns - 82
        button_width = terminal_size.columns - 79
        title = row['title'][0:section_width] + '...' if len(row['title']) >= section_width else row['title']
        button_text = '{:<26} {:<{width}} {}'.format(row['source'], title, row['date'], width=(button_width))

        if not row['read']:
            button = UnreadButton(button_text)
            urwid.connect_signal(button, 'read', mark_item_as_read, row['item_id'])
        else:
            button = ReadButton(button_text)
            urwid.connect_signal(button, 'unread', mark_item_as_unread, row['item_id'])

        urwid.connect_signal(button, 'click', item_chosen, row)
        news_list.append(urwid.AttrMap(button, None, focus_map='reversed'))

    return news_list


def generate_interface(loop, news_items):
    terminal_size = os.get_terminal_size()

    unread_count = get_node_unread_count(selected_node_id)
    unread_count_txt = urwid.Text('Unread: {}'.format(unread_count))
    last_update_txt = urwid.Text('Updated: {}'.format(datetime.now().strftime('%Y-%m-%d %H:%M:%S')), align='right')
    columns_info = urwid.Columns([(round(terminal_size.columns / 2), unread_count_txt), last_update_txt])

    sources_list = generate_sources_list()
    news_list = generate_news_list(news_items)

    elements_list = urwid.ListBox(news_list)
    sources_list = urwid.ListBox(sources_list)

    if list_with_focus == 'news_list':
        selected_list = elements_list
    else:
        selected_list = sources_list

    if len(selected_list.body) == 0:
        pass
    elif len(selected_list.body) > index_with_focus:
        selected_list.set_focus(index_with_focus)
    elif len(selected_list.body) == index_with_focus:
        selected_list.set_focus((index_with_focus - 1))

    columns_news = urwid.Columns([(28, sources_list), (1, urwid.SolidFill(' ')), ((terminal_size.columns - 29), elements_list)])
    columns_news.set_focus(selected_list)

    pile = urwid.Pile([columns_info, urwid.Divider(), ((terminal_size.lines - 2), columns_news)])
    widget = urwid.Filler(pile, valign='top')

    loop.widget = widget


def mark_source_as_read(node_id):
    set_focused_item()

    db = DatabaseAdapter()

    if node_id == node_id_unreads:
        db.set_unreads_read()
    else:
        db.set_source_read(node_id)

    db.close_connection()

    rows = get_source_items(selected_node_id)

    generate_interface(loop, rows)


def source_chosen(node_id):
    global selected_node_id
    global selected_filter

    selected_node_id = node_id
    selected_filter = None

    set_focused_item()

    rows = get_source_items(node_id)

    generate_interface(loop, rows)


def source_chosen_unread(node_id):
    global selected_node_id
    global selected_filter

    selected_node_id = node_id
    selected_filter = 'unread'

    set_focused_item()

    rows = get_source_items(node_id)

    generate_interface(loop, rows)


def mark_item_as_read(item_id):
    set_focused_item()

    DatabaseAdapter().set_item_read(item_id)

    rows = get_source_items(selected_node_id)

    generate_interface(loop, rows)


def mark_item_as_unread(item_id):
    set_focused_item()

    DatabaseAdapter().set_item_unread(item_id)

    rows = get_source_items(selected_node_id)

    generate_interface(loop, rows)


def item_chosen(row):
    set_focused_item()

    DatabaseAdapter().set_item_read(row['item_id'])

    rows = get_source_items(selected_node_id)

    generate_interface(loop, rows)

    webbrowser.open_new_tab(row['url'])


def handle_input(key):
    if key == 'q':
        raise urwid.ExitMainLoop()
    elif key == 'h':
        help()
    elif key == 'f':
        set_focused_item()

        rows = get_source_items(selected_node_id)
        generate_interface(loop, rows)
    else:
        return


def schedule_and_generate_interface(loop = None, data = None):
    set_focused_item()

    rows = get_source_items(selected_node_id)
    generate_interface(loop, rows)

    loop.set_alarm_in(config.UPDATE_INTERVAL, schedule_and_generate_interface)


def get_source_items(node_id):
    db = DatabaseAdapter()

    if node_id and node_id != node_id_unreads:
        if selected_filter == 'unread':
            rows = db.get_node_unread_items(node_id).fetchall()
        else:
            rows = db.get_node_all_items(node_id).fetchall()
    else:
        rows = db.find_unread_news().fetchall()

    db.close_connection()

    return rows


def set_focused_item():
    # retain the focused item after updating the list
    global index_with_focus
    global list_with_focus

    # if help overlay is being displayed, do nothing, the widget is the overlay now
    if type(loop.widget) == urwid.Overlay:
        return

    # get from the main loop the news items list, sources list, focused item
    columns = loop.widget.get_body()[2]
    news_list = columns.widget_list[2].body
    sources_list = columns.widget_list[0].body
    item_with_focus = columns.get_focus_widgets()[1].base_widget if len(columns.get_focus_widgets()) > 1 else None

    list_with_focus = 'news_list'
    selected_list = news_list
    if type(item_with_focus) == SourceButton:
        list_with_focus = 'sources_list'
        selected_list = sources_list

    index_with_focus = selected_list.get_focus()[1] if selected_list.get_focus()[1] else 0


def get_node_unread_count(node_id):
    db = DatabaseAdapter()

    if node_id and node_id == node_id_unreads:
        rows = db.get_unread_count().fetchall()
    else:
        rows = db.get_node_unread_count(node_id).fetchall()

    db.close_connection()

    return rows[0]['unread_count']


def help():
    global loop
    global body

    # body
    body_text = urwid.Text('''
    The available controls:

    arrows  navigate
    r       mark as read
    u       mark as unread
    enter   open on browser,
            select source
    space   show unreads of source
    f       fetch
    q       quit
    ''', align='left')
    body_filler = urwid.Filler(body_text, valign='top')
    body_padding = urwid.Padding(
        body_filler,
        left=1,
        right=1
    )
    body = urwid.LineBox(body_padding)

    # footer
    def close(button):
        loop.widget = body

    footer = urwid.Button('OK', close)
    footer = urwid.AttrWrap(footer, 'selectable', 'focus')
    footer = urwid.GridFlow([footer], 6, 1, 1, 'center')

    # layout
    layout = urwid.Frame(
        body,
        footer=footer,
        focus_part='footer'
    )

    body = loop.widget
    pile = urwid.Pile([layout])
    over = urwid.Overlay(
        pile,
        body,
        align='center',
        valign='middle',
        width=41,
        height=15
    )

    loop.widget = over

    return layout


body = None

urwid.register_signal(UnreadButton, ['click', 'read'])
urwid.register_signal(ReadButton, ['click', 'unread'])
urwid.register_signal(SourceButton, ['click', 'click_unread', 'read'])

index_with_focus = 0
list_with_focus = 'news_list'
node_id_unreads = next(DatabaseAdapter().get_unreads_node())['node_id']
selected_node_id = node_id_unreads
selected_filter = None

config_adapter = ConfigAdapter()
sources = config_adapter.get_sources()

widget = urwid.Filler(urwid.Pile([]), valign='top')
loop = urwid.MainLoop(widget, palette=[('reversed', 'standout', '')], unhandled_input=handle_input)
loop.set_alarm_in(config.UPDATE_INTERVAL, schedule_and_generate_interface)

rows = get_source_items(node_id_unreads)
generate_interface(loop, rows)

loop.run()
