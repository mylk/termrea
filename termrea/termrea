#!/usr/bin/env python

import urwid

from adapters.config import ConfigAdapter
from adapters.database import DatabaseAdapter
import config
from forms import help
from forms import main
import state
from widgets.sourcebutton import SourceButton


def handle_input(key):
    if key == 'q':
        raise urwid.ExitMainLoop()
    elif key == 'h':
        help.display()
    elif key == 'f':
        set_focused_item()

        rows = get_source_items(state.selected_node_id)
        main.display(state.loop, rows)
    else:
        return


def schedule_and_generate_interface(loop = None, data = None):
    set_focused_item()

    rows = get_source_items(state.selected_node_id)
    main.display(loop, rows)

    loop.set_alarm_in(config.UPDATE_INTERVAL, schedule_and_generate_interface)


def get_source_items(node_id):
    db = DatabaseAdapter()

    if node_id and node_id != state.node_id_unreads:
        if state.selected_filter == 'unread':
            rows = db.get_node_unread_items(node_id).fetchall()
        else:
            rows = db.get_node_all_items(node_id).fetchall()
    else:
        rows = db.find_unread_news().fetchall()

    db.close_connection()

    return rows


def set_focused_item():
    # if help overlay is being displayed, do nothing, the widget is the overlay now
    if type(state.loop.widget) == urwid.Overlay:
        return

    # get from the main loop the news items list, sources list, focused item
    columns = state.loop.widget.get_body()[2]
    news_list = columns.widget_list[2].body
    sources_list = columns.widget_list[0].body
    item_with_focus = columns.get_focus_widgets()[1].base_widget if len(columns.get_focus_widgets()) > 1 else None

    # retain the focused item after updating the list
    state.list_with_focus = 'news_list'
    selected_list = news_list
    if type(item_with_focus) == SourceButton:
        state.list_with_focus = 'sources_list'
        selected_list = sources_list

    state.index_with_focus = selected_list.get_focus()[1] if selected_list.get_focus()[1] else 0


state.node_id_unreads = next(DatabaseAdapter().get_unreads_node())['node_id']
state.selected_node_id = state.node_id_unreads

config_adapter = ConfigAdapter()
state.sources = config_adapter.get_sources()

widget = urwid.Filler(urwid.Pile([]), valign='top')
state.loop = urwid.MainLoop(widget, palette=[('reversed', 'standout', '')], unhandled_input=handle_input)
state.loop.set_alarm_in(config.UPDATE_INTERVAL, schedule_and_generate_interface)

rows = get_source_items(state.node_id_unreads)
main.display(state.loop, rows)

state.loop.run()

