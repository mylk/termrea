#!/usr/bin/env python

import urwid

from adapters.config import ConfigAdapter
from adapters.database import DatabaseAdapter
import config
from forms import help
from forms import main
import state
from widgets.sourcebutton import SourceButton


def handle_input(key):
    if key == 'q':
        raise urwid.ExitMainLoop()
    elif key == 'h':
        help.display()
    elif key == 'f':
        main.set_focused_item()

        rows = db.get_source_items(state.selected_node_id, state.node_id_unreads, state.selected_filter)
        main.display(state.loop, rows)
    else:
        return


def schedule_and_generate_interface(loop = None, data = None):
    main.set_focused_item()

    rows = db.get_source_items(state.selected_node_id, state.node_id_unreads, state.selected_filter)
    main.display(loop, rows)

    loop.set_alarm_in(config.UPDATE_INTERVAL, schedule_and_generate_interface)


state.node_id_unreads = next(DatabaseAdapter().get_unreads_source())['node_id']
state.selected_node_id = state.node_id_unreads

db = DatabaseAdapter()
config_adapter = ConfigAdapter()
state.sources = config_adapter.get_sources()

widget = urwid.Filler(urwid.Pile([]), valign='top')
state.loop = urwid.MainLoop(widget, palette=[('reversed', 'standout', '')], unhandled_input=handle_input)
state.loop.set_alarm_in(config.UPDATE_INTERVAL, schedule_and_generate_interface)

rows = db.get_source_items(state.node_id_unreads, state.node_id_unreads, state.selected_filter)
main.display(state.loop, rows)

state.loop.run()

