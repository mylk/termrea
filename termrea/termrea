#!/usr/bin/env python

from datetime import datetime
import fcntl
import urwid
import termios
import struct
import webbrowser

from adapters.config import ConfigAdapter
from adapters.database import DatabaseAdapter
import config
from widgets.readbutton import ReadButton
from widgets.unreadbutton import UnreadButton


def get_terminal_size():
    th, tw, hp, wp = struct.unpack('HHHH', fcntl.ioctl(0, termios.TIOCGWINSZ, struct.pack('HHHH', 0, 0, 0, 0)))
    return th, tw


def generate_interface(loop, rows):
    config = ConfigAdapter()
    sources = config.get_sources()
    sources_list = urwid.SimpleListWalker([])
    for source in sources:
        button = ReadButton(sources[source]['title'])
        urwid.connect_signal(button, 'click', source_chosen, source)
        sources_list.append(urwid.AttrMap(button, None, focus_map='reversed'))
        for subsource in sources[source]['sources']:
            button = ReadButton('  ' + sources[source]['sources'][subsource]['title'])
            urwid.connect_signal(button, 'click', source_chosen, subsource)
            sources_list.append(urwid.AttrMap(button, None, focus_map='reversed'))

    global news_items
    global news_list
    global index_with_focus
    index_with_focus = news_list.get_focus()[1] if news_list.get_focus()[1] else 0
    news_items = rows

    last_update_txt = urwid.Text(datetime.now().strftime('%c'))

    terminal_size = get_terminal_size()
    news_list = urwid.SimpleListWalker([])
    for row in rows:
        section_width = terminal_size[1] - 86
        button_width = terminal_size[1] - 83
        title = row['title'][0:section_width] + '...' if len(row['title']) >= section_width else row['title']
        button_text = '{:<26} {:<{width}} {}'.format(row['source'], title, row['date'], width=(button_width))

        if not row['read']:
            button = UnreadButton(button_text)
        else:
            button = ReadButton(button_text)

        urwid.connect_signal(button, 'click', item_chosen, row)
        news_list.append(urwid.AttrMap(button, None, focus_map='reversed'))

    if len(news_items) > index_with_focus:
        news_list.set_focus(index_with_focus)
    elif not news_items:
        pass
    elif len(news_items) == index_with_focus:
        news_list.set_focus((index_with_focus - 1))

    elements_list = urwid.ListBox(news_list)

    sources_list = urwid.ListBox(sources_list)
    columns = urwid.Columns([(30, sources_list), (1, urwid.SolidFill(' ')), ((terminal_size[1]-32), elements_list)])
    columns.set_focus(elements_list)

    pile = urwid.Pile([last_update_txt, urwid.Divider(), ((terminal_size[0]-2), columns)])
    widget = urwid.Filler(pile, valign='top')

    loop.widget = widget


def source_chosen(button, the_node_id):
    global node_id
    node_id = the_node_id

    db = DatabaseAdapter()
    if the_node_id == next(db.get_unreads_node())['node_id']:
        rows = db.find_unread_news().fetchall()
    else:
        rows = db.get_node_items(the_node_id).fetchall()
    db.close_connection()

    generate_interface(loop, rows)


def item_chosen(button, row):
    global index_with_focus
    global node_id

    DatabaseAdapter().set_item_read(row['item_id'])

    index_with_focus = news_list.get_focus()[1]

    db = DatabaseAdapter()
    if node_id and node_id != next(db.get_unreads_node())['node_id']:
        rows = db.get_node_items(node_id).fetchall()
    else:
        rows = db.find_unread_news().fetchall()
    db.close_connection()

    generate_interface(loop, rows)

    webbrowser.open_new_tab(row['url'])


def exit_program(button):
    raise urwid.ExitMainLoop()


def handle_input(key):
    global news_items
    global index_with_focus
    global node_id

    if key in ['q', 'Q']:
        raise urwid.ExitMainLoop()
    elif key == 'h':
        # @TODO: show help with available keys
        pass
    elif key == 'r':
        index_with_focus = news_list.get_focus()[1]
        if index_with_focus is None:
            return

        focused_item = news_items[int(index_with_focus)]
        DatabaseAdapter().set_item_read(focused_item[2])

    elif key == 'u':
        index_with_focus = news_list.get_focus()[1]
        if index_with_focus is None:
            return

        focused_item = news_items[int(index_with_focus)]
        DatabaseAdapter().set_item_unread(focused_item[2])

    elif key == 'f':
        index_with_focus = news_list.get_focus()[1]

    rows = get_news_items()
    generate_interface(loop, rows)


def schedule_and_generate_interface(loop = None, data = None):
    rows = get_news_items()
    generate_interface(loop, rows)

    loop.set_alarm_in(config.UPDATE_INTERVAL, schedule_and_generate_interface)


def get_news_items():
    db = DatabaseAdapter()
    if node_id and node_id != next(db.get_unreads_node())['node_id']:
        rows = db.get_node_items(node_id).fetchall()
    else:
        rows = db.find_unread_news().fetchall()
    db.close_connection()

    return rows


node_id = None
news_items = []
news_list = urwid.SimpleListWalker([])

pile = urwid.Pile([])
widget = urwid.Filler(pile, valign='top')
loop = urwid.MainLoop(widget, palette=[('reversed', 'standout', '')], unhandled_input=handle_input)
loop.set_alarm_in(config.UPDATE_INTERVAL, schedule_and_generate_interface)

db = DatabaseAdapter()
rows = db.find_unread_news().fetchall()
db.close_connection()

generate_interface(loop, rows)

loop.run()
